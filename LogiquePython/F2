class F2(Thread):

    def __init__(self, array_part_i):
        '''
        Constructor for threads
        '''

        Thread.__init__(self)
        ############################## DATA FOR TESTS ##############################

        # DECOMMENT ONE FOR TESTS
        #selectedEmployees = 'Fake1 Pierre Fake2 Lise Marie Fake3' #6'
        #selectedEmployees = 'Pierre Lise' # 10 times together
        #selectedEmployees = 'Lise Pierre' # 10 times together
        #selectedEmployees = 'Chloé Mike' 
        #selectedEmployees = 'David Inès' # 15 times together

        # DECOMMENT NEXT LINE FOR TESTS WITHOUT QT

        ############################ END DATA FOR TESTS ############################
        self.array_part = array_part_i

        selectedEmployees = ''


    def The_Most(self, employees):
          '''
        Gives the most present group at the same time
        '''
        print("object_per_group")
        print(object_per_group)
        # Get all combinations of X desired employees
        combin_list = get_combin_list(employees, object_per_group)
        len_combin_list = len(combin_list)
        
        print("combin_list")
        print(combin_list)

        print("len_combin_list")
        print(len_combin_list)
        
        # REPLACE BY list() IF IT IS MORE FAST OR TO HAVE SAME CODE EVERYWHERE
        how_much_work_together_each_combin = []
        resultVerif = list()

        for i in range (len_combin_list):
            # OLD
            #M += [Tabstats(moisEnCours, combin_list[i])]
            
            # NEW
            how_much_work_together_each_combin.append(Tabstats_F2(resultVerif, combin_list[i], pathXLSX))
        
        return maximum(how_much_work_together_each_combin)